/**
 * Utilitaire pour g√©rer et diagnostiquer les erreurs r√©seau et API
 * 
 * Ce module fournit des fonctions pour d√©tecter et expliquer les erreurs
 * de connexion, d'autorisation, CORS, et autres probl√®mes API/r√©seau.
 */

/**
 * Type d'erreur d√©tect√©
 */
export type ErrorType = 
  | 'cors'
  | 'network'
  | 'unauthorized'
  | 'forbidden'
  | 'not_found'
  | 'unprocessable'
  | 'server_error'
  | 'timeout'
  | 'invalid_json'
  | 'unknown';

/**
 * Information d√©taill√©e sur une erreur
 */
export interface ErrorInfo {
  type: ErrorType;
  title: string;
  message: string;
  explanation: string;
  solutions: string[];
  technicalDetails?: string;
}

/**
 * D√©tecte et analyse une erreur pour fournir des informations d√©taill√©es
 * 
 * @param error - L'erreur √† analyser
 * @param context - Contexte additionnel (ex: 'api_fetch', 'grist_sync')
 * @returns Information d√©taill√©e sur l'erreur
 */
export function analyzeError(error: any, context: string = 'general'): ErrorInfo {
  // Erreur CORS
  if (isCorsError(error)) {
    return {
      type: 'cors',
      title: 'Erreur CORS (Cross-Origin Resource Sharing)',
      message: 'La requ√™te a √©t√© bloqu√©e par la politique CORS du navigateur',
      explanation: context === 'api_fetch' 
        ? 'Votre backend n\'autorise pas les requ√™tes depuis ce domaine. Les navigateurs bloquent les requ√™tes cross-origin pour des raisons de s√©curit√©.'
        : 'L\'API Grist ou votre backend n\'autorise pas les requ√™tes depuis ce domaine.',
      solutions: [
        '‚úì Configurez votre backend pour autoriser les requ√™tes CORS depuis ce domaine',
        '‚úì Ajoutez les headers CORS appropri√©s : Access-Control-Allow-Origin',
        '‚úì Pour le d√©veloppement local, utilisez un proxy ou configurez votre serveur',
        '‚ö†Ô∏è √âvitez d\'utiliser des extensions pour d√©sactiver CORS en production'
      ],
      technicalDetails: error.message || 'CORS policy violation'
    };
  }

  // Erreur r√©seau (offline, DNS, etc.)
  if (isNetworkError(error)) {
    return {
      type: 'network',
      title: 'Erreur de connexion r√©seau',
      message: 'Impossible de se connecter au serveur',
      explanation: 'Le serveur est injoignable. Cela peut √™tre d√ª √† une connexion internet interrompue, une URL incorrecte, ou un serveur hors ligne.',
      solutions: [
        '‚úì V√©rifiez votre connexion internet',
        '‚úì V√©rifiez que l\'URL est correcte et accessible',
        '‚úì V√©rifiez que le serveur est en ligne',
        '‚úì V√©rifiez qu\'il n\'y a pas de pare-feu bloquant la connexion'
      ],
      technicalDetails: error.message || 'Network request failed'
    };
  }

  // Erreur HTTP avec status code
  if (error.message && error.message.includes('HTTP')) {
    const statusMatch = error.message.match(/HTTP (\d+)/);
    if (statusMatch) {
      const status = parseInt(statusMatch[1]);
      return analyzeHttpError(status, error, context);
    }
  }

  // Erreur de parsing JSON
  if (error.message && (error.message.includes('JSON') || error.message.includes('parse'))) {
    return {
      type: 'invalid_json',
      title: 'Erreur de format de donn√©es',
      message: 'La r√©ponse du serveur n\'est pas au format JSON valide',
      explanation: 'Le serveur a renvoy√© des donn√©es qui ne peuvent pas √™tre interpr√©t√©es comme du JSON.',
      solutions: [
        '‚úì V√©rifiez que l\'URL pointe vers une API JSON',
        '‚úì V√©rifiez que le serveur renvoie bien du JSON et non du HTML ou du texte',
        '‚úì Consultez la console du navigateur (F12) pour voir la r√©ponse brute'
      ],
      technicalDetails: error.message
    };
  }

  // Erreur de timeout
  if (error.message && error.message.toLowerCase().includes('timeout')) {
    return {
      type: 'timeout',
      title: 'D√©lai d\'attente d√©pass√©',
      message: 'Le serveur met trop de temps √† r√©pondre',
      explanation: 'La requ√™te a pris trop de temps et a √©t√© annul√©e.',
      solutions: [
        '‚úì V√©rifiez que le serveur fonctionne correctement',
        '‚úì R√©essayez plus tard',
        '‚úì V√©rifiez qu\'il n\'y a pas de probl√®me de performance c√¥t√© serveur'
      ],
      technicalDetails: error.message
    };
  }

  // Erreur inconnue
  return {
    type: 'unknown',
    title: 'Erreur inattendue',
    message: error.message || 'Une erreur inconnue s\'est produite',
    explanation: 'Une erreur impr√©vue s\'est produite. Consultez les d√©tails techniques ci-dessous.',
    solutions: [
      '‚úì V√©rifiez la console du navigateur (F12) pour plus de d√©tails',
      '‚úì R√©essayez l\'op√©ration',
      '‚úì Contactez le support si le probl√®me persiste'
    ],
    technicalDetails: error.stack || error.toString()
  };
}

/**
 * Analyse une erreur HTTP en fonction du status code
 */
function analyzeHttpError(status: number, error: any, context: string): ErrorInfo {
  switch (status) {
    case 401:
      return {
        type: 'unauthorized',
        title: '401 - Non autoris√©',
        message: 'Authentification requise ou token invalide',
        explanation: context === 'grist_sync'
          ? 'Le document Grist est priv√© et n√©cessite un token API, ou votre token est invalide.'
          : 'L\'API n√©cessite une authentification que votre backend doit g√©rer.',
        solutions: [
          context === 'grist_sync' 
            ? '‚úì Ajoutez un token API Grist valide dans la configuration'
            : '‚úì V√©rifiez que votre backend g√®re correctement l\'authentification',
          '‚úì V√©rifiez que le token n\'a pas expir√©',
          '‚úì V√©rifiez les permissions du token'
        ],
        technicalDetails: error.message
      };

    case 403:
      return {
        type: 'forbidden',
        title: '403 - Acc√®s interdit',
        message: 'Permissions insuffisantes',
        explanation: context === 'grist_sync'
          ? 'Votre token API Grist n\'a pas les permissions n√©cessaires pour modifier ce document ou cette table.'
          : 'Votre backend ou l\'API distante refuse l\'acc√®s √† cette ressource.',
        solutions: [
          '‚úì V√©rifiez que vous avez les droits d\'acc√®s sur le document/table',
          context === 'grist_sync'
            ? '‚úì V√©rifiez les permissions du token API dans les param√®tres Grist'
            : '‚úì Contactez l\'administrateur de l\'API pour obtenir les permissions',
          '‚úì Assurez-vous que le token utilis√© est le bon'
        ],
        technicalDetails: error.message
      };

    case 404:
      return {
        type: 'not_found',
        title: '404 - Ressource introuvable',
        message: 'Document, table ou URL introuvable',
        explanation: context === 'grist_sync'
          ? 'Le Document ID ou le Table ID sp√©cifi√© n\'existe pas, ou l\'URL de l\'API Grist est incorrecte.'
          : 'L\'URL du backend est incorrecte ou la ressource n\'existe pas.',
        solutions: [
          context === 'grist_sync'
            ? '‚úì V√©rifiez que le Document ID est correct (dans l\'URL Grist)'
            : '‚úì V√©rifiez que l\'URL du backend est correcte',
          context === 'grist_sync'
            ? '‚úì V√©rifiez que le Table ID correspond exactement au nom de la table (sensible √† la casse)'
            : '‚úì V√©rifiez que l\'endpoint existe',
          context === 'grist_sync'
            ? '‚úì Testez la connexion avec le bouton "üîç Tester la connexion Grist"'
            : '‚úì Testez l\'URL dans un navigateur ou avec un outil comme Postman'
        ],
        technicalDetails: error.message
      };

    case 422:
      return {
        type: 'unprocessable',
        title: '422 - Donn√©es invalides',
        message: 'Erreur de validation des donn√©es',
        explanation: 'Les donn√©es envoy√©es ne respectent pas le format attendu par l\'API.',
        solutions: [
          '‚úì V√©rifiez que les types de donn√©es correspondent (texte, nombre, date, etc.)',
          '‚úì V√©rifiez que les colonnes Grist existent et sont correctement configur√©es',
          '‚úì V√©rifiez le mapping des champs entre l\'API et Grist',
          '‚úì Consultez le journal de synchronisation pour plus de d√©tails'
        ],
        technicalDetails: error.message
      };

    case 500:
    case 502:
    case 503:
    case 504:
      return {
        type: 'server_error',
        title: `${status} - Erreur serveur`,
        message: 'Le serveur a rencontr√© une erreur',
        explanation: context === 'grist_sync'
          ? 'Le serveur Grist a rencontr√© une erreur interne. Cela peut √™tre temporaire.'
          : 'Votre backend ou l\'API distante a rencontr√© une erreur interne.',
        solutions: [
          '‚úì R√©essayez dans quelques instants',
          '‚úì V√©rifiez le statut du service (Grist ou votre backend)',
          '‚úì Si le probl√®me persiste, contactez le support',
          '‚úì Consultez les logs du serveur pour plus d\'informations'
        ],
        technicalDetails: error.message
      };

    default:
      return {
        type: 'unknown',
        title: `Erreur HTTP ${status}`,
        message: `Le serveur a renvoy√© une erreur ${status}`,
        explanation: 'Une erreur HTTP inattendue s\'est produite.',
        solutions: [
          '‚úì Consultez la documentation de l\'API',
          '‚úì V√©rifiez la console du navigateur pour plus de d√©tails',
          '‚úì Contactez le support si n√©cessaire'
        ],
        technicalDetails: error.message
      };
  }
}

/**
 * D√©tecte si une erreur est une erreur CORS
 */
function isCorsError(error: any): boolean {
  const message = error.message?.toLowerCase() || '';
  
  // Patterns communs d'erreurs CORS
  return (
    message.includes('cors') ||
    message.includes('cross-origin') ||
    message.includes('access-control-allow-origin') ||
    // Fetch API renvoie souvent TypeError pour CORS
    (error.name === 'TypeError' && message.includes('failed to fetch')) ||
    (error.name === 'TypeError' && message.includes('network request failed'))
  );
}

/**
 * D√©tecte si une erreur est une erreur r√©seau
 */
function isNetworkError(error: any): boolean {
  const message = error.message?.toLowerCase() || '';
  
  return (
    error.name === 'TypeError' && !isCorsError(error) ||
    message.includes('network') ||
    message.includes('failed to fetch') ||
    message.includes('network request failed') ||
    message.includes('networkerror') ||
    message.includes('connection') ||
    message.includes('econnrefused') ||
    message.includes('offline')
  );
}

/**
 * Formate une erreur pour l'affichage dans le status log
 * 
 * @param errorInfo - Information sur l'erreur
 * @returns Message format√© pour le log
 */
export function formatErrorForLog(errorInfo: ErrorInfo): string {
  return `‚ùå ${errorInfo.title}\n\n${errorInfo.explanation}\n\nüí° Solutions :\n${errorInfo.solutions.join('\n')}`;
}

/**
 * Formate une erreur pour l'affichage dans un message court
 * 
 * @param errorInfo - Information sur l'erreur
 * @returns Message court
 */
export function formatErrorShort(errorInfo: ErrorInfo): string {
  return `${errorInfo.message} - ${errorInfo.solutions[0]}`;
}
